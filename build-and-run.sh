#!/bin/bash
# build-and-run.sh - Script para construir y ejecutar el proyecto

echo "üöÄ Construyendo y ejecutando Lugares Comunes API..."

# Funci√≥n para mostrar ayuda
show_help() {
    echo "Uso: $0 [OPCI√ìN]"
    echo ""
    echo "Opciones:"
    echo "  -h, --help          Mostrar esta ayuda"
    echo "  -d, --docker        Ejecutar con Docker"
    echo "  -l, --local         Ejecutar localmente"
    echo "  -t, --test          Ejecutar tests"
    echo "  -c, --clean         Limpiar proyecto"
    echo "  -b, --build         Solo construir"
    echo "  --stop              Detener contenedores Docker"
    echo "  --logs              Ver logs de Docker"
    echo "  --db-reset          Resetear base de datos"
}

# Funci√≥n para ejecutar con Docker
run_docker() {
    echo "üê≥ Ejecutando con Docker..."
    
    # Verificar si Docker est√° ejecut√°ndose
    if ! docker info > /dev/null 2>&1; then
        echo "‚ùå Error: Docker no est√° ejecut√°ndose"
        exit 1
    fi
    
    # Construir y ejecutar
    echo "üì¶ Construyendo contenedores..."
    docker-compose down
    docker-compose build
    
    echo "üöÄ Iniciando servicios..."
    docker-compose up -d
    
    echo "‚è≥ Esperando a que los servicios est√©n listos..."
    sleep 10
    
    # Verificar estado de los servicios
    if docker-compose ps | grep -q "Up"; then
        echo "‚úÖ Servicios ejecut√°ndose correctamente!"
        echo ""
        echo "üåê API: http://localhost:8080/api"
        echo "üóÑÔ∏è  Adminer: http://localhost:8081"
        echo "üìä Health: http://localhost:8080/api/auth/health"
        echo ""
        echo "üìã Usuarios de prueba:"
        echo "   üë§ Admin: admin@puce.edu.ec / admin123"
        echo "   üéì Estudiante: estudiante@puce.edu.ec / estudiante123"
        echo "   üë©‚Äçüè´ Docente: docente@puce.edu.ec / docente123"
        echo ""
        echo "Ver logs: docker-compose logs -f"
    else
        echo "‚ùå Error iniciando servicios"
        docker-compose ps
        exit 1
    fi
}

# Funci√≥n para ejecutar localmente
run_local() {
    echo "üè† Ejecutando localmente..."
    
    # Verificar Java
    if ! command -v java &> /dev/null; then
        echo "‚ùå Java no est√° instalado"
        exit 1
    fi
    
    # Verificar Maven
    if ! command -v mvn &> /dev/null; then
        echo "‚ùå Maven no est√° instalado"
        exit 1
    fi
    
    # Configurar variables de entorno para desarrollo local
    export DB_HOST=localhost
    export DB_PORT=3306
    export DB_NAME=lugares_comunes
    export DB_USERNAME=root
    export DB_PASSWORD=password
    export JWT_SECRET=local_jwt_secret_key_for_development_only
    export SPRING_PROFILES_ACTIVE=dev
    
    echo "üîß Construyendo proyecto..."
    mvn clean package -DskipTests
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Construcci√≥n exitosa!"
        echo "üöÄ Iniciando aplicaci√≥n..."
        java -jar target/*.jar
    else
        echo "‚ùå Error en la construcci√≥n"
        exit 1
    fi
}

# Funci√≥n para ejecutar tests
run_tests() {
    echo "üß™ Ejecutando tests..."
    mvn test
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Todos los tests pasaron!"
    else
        echo "‚ùå Algunos tests fallaron"
        exit 1
    fi
}

# Funci√≥n para limpiar proyecto
clean_project() {
    echo "üßπ Limpiando proyecto..."
    
    # Limpiar Maven
    mvn clean
    
    # Limpiar Docker
    docker-compose down
    docker system prune -f
    docker volume prune -f
    
    echo "‚úÖ Proyecto limpio!"
}

# Funci√≥n para solo construir
build_only() {
    echo "üî® Construyendo proyecto..."
    mvn clean package -DskipTests
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Construcci√≥n exitosa!"
        echo "üì¶ JAR ubicado en: target/"
        ls -la target/*.jar
    else
        echo "‚ùå Error en la construcci√≥n"
        exit 1
    fi
}

# Funci√≥n para detener Docker
stop_docker() {
    echo "üõë Deteniendo contenedores..."
    docker-compose down
    echo "‚úÖ Contenedores detenidos"
}

# Funci√≥n para ver logs
show_logs() {
    echo "üìã Mostrando logs..."
    docker-compose logs -f
}

# Funci√≥n para resetear base de datos
reset_database() {
    echo "üóÑÔ∏è Reseteando base de datos..."
    docker-compose down
    docker volume rm $(docker volume ls -q | grep mysql) 2>/dev/null
    docker-compose up -d mysql-db
    echo "‚úÖ Base de datos reseteada"
}

# Procesar argumentos
case "${1:-}" in
    -h|--help)
        show_help
        ;;
    -d|--docker)
        run_docker
        ;;
    -l|--local)
        run_local
        ;;
    -t|--test)
        run_tests
        ;;
    -c|--clean)
        clean_project
        ;;
    -b|--build)
        build_only
        ;;
    --stop)
        stop_docker
        ;;
    --logs)
        show_logs
        ;;
    --db-reset)
        reset_database
        ;;
    "")
        echo "ü§î ¬øC√≥mo quieres ejecutar el proyecto?"
        echo "1) Docker (recomendado)"
        echo "2) Local"
        echo "3) Solo tests"
        read -p "Selecciona una opci√≥n (1-3): " choice
        
        case $choice in
            1) run_docker ;;
            2) run_local ;;
            3) run_tests ;;
            *) echo "‚ùå Opci√≥n inv√°lida"; exit 1 ;;
        esac
        ;;
    *)
        echo "‚ùå Opci√≥n desconocida: $1"
        show_help
        exit 1
        ;;
esac